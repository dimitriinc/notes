LMC is a simplified model of the Von Neumann's architecture. To give it commands we use it's version of an assembley language.
Each CPU has it own Instruction Set - a list of commands that the CPU can understand.
The code in assembley language gets translated into binary by an Assembler and gets stored as an executable file.

so in LMC CPU consists of several registers (small memory incorporated in CPU, used to store intermediate results, data operands, and memory addresses, it's the fastest type of memory - access time is few clock cycles) and an arithmetic unit. CPU is connected with RAM, the access time for RAM counts in hundreds of clock cycles.

	* a clock cycle is the amount of time btn two pulses of an electronic oscillator, which is used to synchronize the activities of the CPU and
	  other components of a computer system; it's a basic time unit used by the CPU.
	  the speed of CPU is measured in terms of how many clock cycles the CPU can execute in a second, the unit of measure of this 
	  clock speed / clock rate is Hertz. one Hertz is one cycle per second. a CPU with the speed clock of 1.6GHz can execute 1.6 billion clock
	  cycles per second.
	  
The registers include: I/O, Program counter, Instruction register, Address register, Accumulator.
The fetch-decode-execute cycle starts with the Program counter, that stores the line number of the program to execute next. as the program begins it stores 0, so the first thing to do is to fetch the instruction stored at the 0 slot in the memory (each line of code contains one instruction). as the instruction is being fetched, the value stored in the Program counter gets incremented by the Arithmetic Unit, so the Program counter always stores the memory slot of the next instruction to execute.
When the value stored in the 0 memory slot is fetched by the CPU, it gets decoded: it contains a number that indicates the type of instruction to execute, and also a data operand, which is usually a memory location that points to the data on which to perform the instruction, but it can also be a modifier of some sort (e.g. in LMC, INP and OUP commands share the same instruction code - 9, but INP will have 01 as its data operand, and OUT - 02, so when the CPU gets the 9 instuction, it checks the operand, and if its 01, the value from the Input register is stored into the Accumulator, and if its 02, the value in the Accumulator is copied into the Output register). So, at the decoding stage the instruction code is stored into the Instruction register, and the data operand is stored into the Address register.
the Accumulator is the start of the execution stage, all the instructions are pretty much about interacting with the Accumulator: STA stores the value in the Acc to the memory address from the data operand, LDA loads the value from the Address register into the Acc, ADD tells the Arithmetic Unit to add the value in the Acc to the value from the memory slot that's in the Address register.

The way CPU reads the data operands is call 'addressing' and there are different types of it. the LMC uses the 'direct addressing', which means that the data on which to perform instructions is stored in a separate memory slot (a variable), and the instruction itself contains the memory address of that data, stored as an operand.
For comparison, one of the other addressing modes is 'immediate addressing': the CPU retrieves the data from the instruction itself, i.e. the data operand of the instruction contains the raw data on which to perform the instruction.


BRANCHING

In this section we are introduced to a slightly more sofisticated LMC model, most notably it has a Memory Address Register and a Memory Data Register.
They act like the CPU's interface: the data, before going outside, gets stored there; and upon entering, that's the first place where it gets stored.
For example, at the start, the value in the Program Counter is copied to the MAR and it's not a counter anymore, it's the address of the instruction in the RAM, and we use it to fetch the instruction in this RAM slot. The instruction, as a raw data (not decoded yet), is stored first in the MDR, and from there it's copied to the Control Instruction Register as the last action of the 'fetch' phase of a FDE cycle.
At the decoding phase, the data in the CIR gets broken down into an opcode (instruction) and an operand. 
At the execution phase, the operand, being a reference to a data location in the RAM, is stored in the MAR. and the MDR is communicating with the Acc, e.g. with STA, the data from the ACC, before travelling to the RAM location stored in the MAR, is stored in the MDR; and with LDA, the data from RAM, before getting into the ACC, is stored in the MDR.

Branching performs a jump to the instruction stored in a specified memory slot, which differs from the memory slot in the Program Counter, based on some evaluation of the value in the Acc. So, if the evaluation is true, the operand of the instruction gets copied to the Program Counter, and the next FDE cycle starts with fetching the instruction stored in that memory slot. i.e. the target memory slot is specified as an operand of the branching instruction.

LOOPS

There is no special commands for looping. What it is basically, is keeping branching to the beginning of the loop, until some condition is met. We use some variable to keep track of that condition, the value of this var must change in some way during the loop. In multiplication and division that var will be one of the numbers; in other loops, when we want to perform a certain operation a defined and known amount of time, we crete a special 'counter' var to know when to branch, and when to finally execute the next command.












